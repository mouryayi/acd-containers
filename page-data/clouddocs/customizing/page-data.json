{"componentChunkName":"component---src-pages-clouddocs-customizing-md","path":"/clouddocs/customizing/","result":{"pageContext":{"frontmatter":{"title":"Customizing","excerpt":"Customizing.","categories":"How To","slug":"customizing","toc":true},"relativePagePath":"/clouddocs/customizing.md","titleType":"page","MdxNode":{"id":"5eabdb2e-d638-5c1d-ba7f-e939ff76a392","children":[],"parent":"e29a1417-cd68-5a95-b285-6839b1c72e60","internal":{"content":"---\ntitle: \"Customizing\"\nexcerpt: \"Customizing.\"\ncategories: How To\nslug: customizing\ntoc: true\n---\n<!-- ---\n\ncopyright:\n  years: 2011, 2019\nlastupdated: \"2019-04-12\"\n\nkeywords: annotator clinical data, clinical data, annotation\n\nsubcollection: wh-acd\n\n--- -->\n\n<!-- # Customizing -->\n\nThe Annotator for Clinical Data Configuration Editor supports extensive customization of the annotators as well as the ability to preview the customizations and export them in the form of a cartridge (zip file) that can be deployed directly to the service via the `/cartridges` APIs.\n\nThe configuration editor facilitates the following customizations:\n\n| Customization | Description |\n|----|----|\n| Dictionaries | A set of terms describing a unique concept that is matched against the provided text to be analyzed. |\n| Derived Concepts | Rules for deriving concepts when one or more other concepts or tokens appears in the surrounding context. |\n| Filters | Conditional rules for omitting undesired annotations from the service response. |\n| Clinical Attributes | Configurable annotations built upon one or more other annotations. Optionally, semantically linked values in the surrounding context can be captured and associated with the attribute. |\n| Derived Clincal Attributes | Conditional logic and expressions for deriving new attributes based on values associated with other attributes. |\n| Attribute Qualifiers | Configurations for detecting qualifying terms in the immediate context of an attribute and capturing the qualifiers as a field within the output attribute annotation. |\n| Ontological Relations | Ontology configurations for extracting ontological relations between concepts cooccurring within the same sentence. |\n| CPT Code Mapping | Mapping configurations for outputting CPT codes from the concept and procedure annotators. |\n`Table 1. Customizations facilitated by the configuaration editor`\n\n[Contact your IBM representative](https://www.ibm.com/account/reg/us-en/signup?formid=MAIL-watsonhealthna) to learn more about leveraging the configuration editor to customize the behavior of the service.\n\n## Cartridge Deployment\n\n1. The consumer uses the IBM Clinical Data Annotator Configuration Editor to create a new cartridge (or modify an existing one) and customizes the contents (artifacts) of the cartridge to their domain. After that, the consumer will **Export** the cartridge in order to save a snapshot of the cartridge.\n\n2. The consumer deploys the cartridge snapshot (a zip file) to  IBM Clinical Data Annotator using _POST /v1/cartridges_ API. A successful request for creating a cartridge will return with HTTP <q>202 ACCEPTED</q> response code and will include the path to the resource, e.g., /v1/cartridges/cartridge_id in the response body and the response header. The resource path can be used in _GET /v1/cartridges/cartridgeId_ API to obtain the overall deployment status. In the following curl example, the consumer's cartridge file is `/path/to/name_of_cartridge_file.zip`.\n\n```Curl\n\n curl -X POST --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n  --header \"Accept:application/json\" \\\n --header \"Content-Type:application/octet-stream\" \\\n --data-binary @/path/to/name_of_cartridge_file.zip \\\n \"<route_host>/v1/cartridges?version=2019-09-01\"\n\n```\n\nUse the _POST /v1/cartridges_ operation for the initial deployment of a cartridge version and _PUT /v1/cartridges_ to redploy cartridge updates. Different pusblished versions of a cartridge (e.g. cartridge_v1.0, cartridge_v2.0) will need to be initially deployed via the POST operation and subsequently redeployed via the PUT operation.\n\n3. The consumer redeploys a previously deployed cartridge version using the _PUT /v1/cartridges_ API. The cartridges id is extracted directly from the cartridge zip file. A successful request for updating the cartridge (re)deployment will result in a HTTP <q>202 ACCEPTED</q> response code and will include the path to the resource, e.g., -v1-cartridges-cartridge_id in the response body and the response header.\n\n```Curl\n\n curl -X PUT --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n --header \"Accept:application/json\" \\\n --header \"Content-Type:application/octet-stream\" \\\n --data-binary @/path/to/name_of_cartridge_file.zip \\\n \"<route_host>/v1/cartridges?version=2019-09-01\"\n\n```\n\n4. The consumer retrieves a list of deployed cartridges for a given tenant using the _GET /v1/cartridges_ API. An empty list is returned if no cartridges have been deployed.\n\n```Curl\n\n curl -X GET --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n --header \"Accept:application/json\" \\\n \"<route_host>/v1/cartridges?version=2019-09-01\"\n\n```\n\n5. The consumer can view the status of a specific cartridge deployment by invoking the _GET /v1/cartridges/{id}_ API with the cartridge ID supplied as a path parameter. If the supplied ID does not exists, then a HTTP  <q> 404 Not Found </q> response code is returned. The following curl command returns the deployment status of the <q>cartridge_id</q>.\n\n```Curl\n\n curl -X GET --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n --header \"Accept:application/json\" \\\n \"<route_host>/v1/cartridges/cartridge_id?version=2019-09-01\"\n\n```\n\nThe _/v1/cartridges_ API is the recommended way for a cartridge deployment and is compatible with the legacy _/v1/deploy_ API. In many situations, the consumer has already deployed a cartridge using the _/v1/deploy_ API and the consumer can immediately update the same cartridge using the above POST and PUT operations on the _/v1/cartridges_ API to initially create and to subsequently update the cartridge deployment.\nA typical _POST /v1/cartridges_ operation creates and initializes a deployment for cartridge that has never been deployed to the system. For cartridges that have been previously deployed with the _/v1/deploy_ API, the _POST /v1/cartridges_ API will create, initialize, and update an existing cartridge deployment. Subsequent redeployments of a cartridge must use the _PUT /v1/cartridges_ API.\n\n## Legacy Cartridge Deployment\n\n1. The consumer uses the IBM Clinical Data Annotator Configuration Editor to create a new cartridge (or modify an existing one) and customizes the contents (artifacts) of the cartridge to their domain. After that, the consumer will **Export** the cartridge in order to save a snapshot of the cartridge.\n2. The consumer deploys the cartridge snapshot (a zip file) to  IBM Clinical Data Annotator using _POST /v1/deploy_ API. In the following curl example, the consumer's cartridge file is `./my_cartridges/name_of_cartridge_file.zip`, and `update=false` means do not update the resource if it already exists. Specifying the **update=true** parameter on the deploy API to update an existing cartridge.\n\nA successful cartridge deploy will result in <q>201 Created</q> if it is a new resource, or <q>200 OK</q> if `update=true` was specified and the existing resource was updated.\n\n```Curl\ncurl -X POST --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n--header “Content-Type: application/octet-stream” \\\n--header \"Accept: application/json\" \\\n--data-binary @./my_cartridges/name_of_cartridge_file.zip \\\n\"<route_host>/v1/deploy?update=false&version=2018-01-17\"\n```\n\nSome large cartridge deployments can exceed the request timeout thresholds defined in the DataPower gateways (usually after 2 mins). In that event, you may receive the following error response. See [Cartridge Deployment Timeout](/clouddocs/customizing/) for additional considerations during the deployment of large cartridges.\n","type":"Mdx","contentDigest":"aa1d9e2515811ee0dc2ebbcbccf80aa1","owner":"gatsby-plugin-mdx","counter":195},"frontmatter":{"title":"Customizing","excerpt":"Customizing.","categories":"How To","slug":"customizing","toc":true},"excerpt":"Customizing.","exports":{},"rawBody":"---\ntitle: \"Customizing\"\nexcerpt: \"Customizing.\"\ncategories: How To\nslug: customizing\ntoc: true\n---\n<!-- ---\n\ncopyright:\n  years: 2011, 2019\nlastupdated: \"2019-04-12\"\n\nkeywords: annotator clinical data, clinical data, annotation\n\nsubcollection: wh-acd\n\n--- -->\n\n<!-- # Customizing -->\n\nThe Annotator for Clinical Data Configuration Editor supports extensive customization of the annotators as well as the ability to preview the customizations and export them in the form of a cartridge (zip file) that can be deployed directly to the service via the `/cartridges` APIs.\n\nThe configuration editor facilitates the following customizations:\n\n| Customization | Description |\n|----|----|\n| Dictionaries | A set of terms describing a unique concept that is matched against the provided text to be analyzed. |\n| Derived Concepts | Rules for deriving concepts when one or more other concepts or tokens appears in the surrounding context. |\n| Filters | Conditional rules for omitting undesired annotations from the service response. |\n| Clinical Attributes | Configurable annotations built upon one or more other annotations. Optionally, semantically linked values in the surrounding context can be captured and associated with the attribute. |\n| Derived Clincal Attributes | Conditional logic and expressions for deriving new attributes based on values associated with other attributes. |\n| Attribute Qualifiers | Configurations for detecting qualifying terms in the immediate context of an attribute and capturing the qualifiers as a field within the output attribute annotation. |\n| Ontological Relations | Ontology configurations for extracting ontological relations between concepts cooccurring within the same sentence. |\n| CPT Code Mapping | Mapping configurations for outputting CPT codes from the concept and procedure annotators. |\n`Table 1. Customizations facilitated by the configuaration editor`\n\n[Contact your IBM representative](https://www.ibm.com/account/reg/us-en/signup?formid=MAIL-watsonhealthna) to learn more about leveraging the configuration editor to customize the behavior of the service.\n\n## Cartridge Deployment\n\n1. The consumer uses the IBM Clinical Data Annotator Configuration Editor to create a new cartridge (or modify an existing one) and customizes the contents (artifacts) of the cartridge to their domain. After that, the consumer will **Export** the cartridge in order to save a snapshot of the cartridge.\n\n2. The consumer deploys the cartridge snapshot (a zip file) to  IBM Clinical Data Annotator using _POST /v1/cartridges_ API. A successful request for creating a cartridge will return with HTTP <q>202 ACCEPTED</q> response code and will include the path to the resource, e.g., /v1/cartridges/cartridge_id in the response body and the response header. The resource path can be used in _GET /v1/cartridges/cartridgeId_ API to obtain the overall deployment status. In the following curl example, the consumer's cartridge file is `/path/to/name_of_cartridge_file.zip`.\n\n```Curl\n\n curl -X POST --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n  --header \"Accept:application/json\" \\\n --header \"Content-Type:application/octet-stream\" \\\n --data-binary @/path/to/name_of_cartridge_file.zip \\\n \"<route_host>/v1/cartridges?version=2019-09-01\"\n\n```\n\nUse the _POST /v1/cartridges_ operation for the initial deployment of a cartridge version and _PUT /v1/cartridges_ to redploy cartridge updates. Different pusblished versions of a cartridge (e.g. cartridge_v1.0, cartridge_v2.0) will need to be initially deployed via the POST operation and subsequently redeployed via the PUT operation.\n\n3. The consumer redeploys a previously deployed cartridge version using the _PUT /v1/cartridges_ API. The cartridges id is extracted directly from the cartridge zip file. A successful request for updating the cartridge (re)deployment will result in a HTTP <q>202 ACCEPTED</q> response code and will include the path to the resource, e.g., -v1-cartridges-cartridge_id in the response body and the response header.\n\n```Curl\n\n curl -X PUT --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n --header \"Accept:application/json\" \\\n --header \"Content-Type:application/octet-stream\" \\\n --data-binary @/path/to/name_of_cartridge_file.zip \\\n \"<route_host>/v1/cartridges?version=2019-09-01\"\n\n```\n\n4. The consumer retrieves a list of deployed cartridges for a given tenant using the _GET /v1/cartridges_ API. An empty list is returned if no cartridges have been deployed.\n\n```Curl\n\n curl -X GET --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n --header \"Accept:application/json\" \\\n \"<route_host>/v1/cartridges?version=2019-09-01\"\n\n```\n\n5. The consumer can view the status of a specific cartridge deployment by invoking the _GET /v1/cartridges/{id}_ API with the cartridge ID supplied as a path parameter. If the supplied ID does not exists, then a HTTP  <q> 404 Not Found </q> response code is returned. The following curl command returns the deployment status of the <q>cartridge_id</q>.\n\n```Curl\n\n curl -X GET --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n --header \"Accept:application/json\" \\\n \"<route_host>/v1/cartridges/cartridge_id?version=2019-09-01\"\n\n```\n\nThe _/v1/cartridges_ API is the recommended way for a cartridge deployment and is compatible with the legacy _/v1/deploy_ API. In many situations, the consumer has already deployed a cartridge using the _/v1/deploy_ API and the consumer can immediately update the same cartridge using the above POST and PUT operations on the _/v1/cartridges_ API to initially create and to subsequently update the cartridge deployment.\nA typical _POST /v1/cartridges_ operation creates and initializes a deployment for cartridge that has never been deployed to the system. For cartridges that have been previously deployed with the _/v1/deploy_ API, the _POST /v1/cartridges_ API will create, initialize, and update an existing cartridge deployment. Subsequent redeployments of a cartridge must use the _PUT /v1/cartridges_ API.\n\n## Legacy Cartridge Deployment\n\n1. The consumer uses the IBM Clinical Data Annotator Configuration Editor to create a new cartridge (or modify an existing one) and customizes the contents (artifacts) of the cartridge to their domain. After that, the consumer will **Export** the cartridge in order to save a snapshot of the cartridge.\n2. The consumer deploys the cartridge snapshot (a zip file) to  IBM Clinical Data Annotator using _POST /v1/deploy_ API. In the following curl example, the consumer's cartridge file is `./my_cartridges/name_of_cartridge_file.zip`, and `update=false` means do not update the resource if it already exists. Specifying the **update=true** parameter on the deploy API to update an existing cartridge.\n\nA successful cartridge deploy will result in <q>201 Created</q> if it is a new resource, or <q>200 OK</q> if `update=true` was specified and the existing resource was updated.\n\n```Curl\ncurl -X POST --header \"Authorization: Bearer xxxxxxxxxxxxxxx\" \\\n--header “Content-Type: application/octet-stream” \\\n--header \"Accept: application/json\" \\\n--data-binary @./my_cartridges/name_of_cartridge_file.zip \\\n\"<route_host>/v1/deploy?update=false&version=2018-01-17\"\n```\n\nSome large cartridge deployments can exceed the request timeout thresholds defined in the DataPower gateways (usually after 2 mins). In that event, you may receive the following error response. See [Cartridge Deployment Timeout](/clouddocs/customizing/) for additional considerations during the deployment of large cartridges.\n","fileAbsolutePath":"/home/travis/build/IBM/acd-containers/src/pages/clouddocs/customizing.md"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}